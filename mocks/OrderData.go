// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	order "e-commerce-api/feature/order"

	mock "github.com/stretchr/testify/mock"
)

// OrderData is an autogenerated mock type for the OrderData type
type OrderData struct {
	mock.Mock
}

// Confirm provides a mock function with given fields: orderID, updateOrder
func (_m *OrderData) Confirm(orderID uint, updateOrder order.Core) error {
	ret := _m.Called(orderID, updateOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, order.Core) error); ok {
		r0 = rf(orderID, updateOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: userID, _a1, carts
func (_m *OrderData) CreateOrder(userID uint, _a1 order.Core, carts []int) (uint, error) {
	ret := _m.Called(userID, _a1, carts)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint, order.Core, []int) uint); ok {
		r0 = rf(userID, _a1, carts)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, order.Core, []int) error); ok {
		r1 = rf(userID, _a1, carts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBuy provides a mock function with given fields: userID, orderID
func (_m *OrderData) GetOrderBuy(userID uint, orderID uint) (order.Core, error) {
	ret := _m.Called(userID, orderID)

	var r0 order.Core
	if rf, ok := ret.Get(0).(func(uint, uint) order.Core); ok {
		r0 = rf(userID, orderID)
	} else {
		r0 = ret.Get(0).(order.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderSell provides a mock function with given fields: userID, orderID
func (_m *OrderData) GetOrderSell(userID uint, orderID uint) (order.Core, error) {
	ret := _m.Called(userID, orderID)

	var r0 order.Core
	if rf, ok := ret.Get(0).(func(uint, uint) order.Core); ok {
		r0 = rf(userID, orderID)
	} else {
		r0 = ret.Get(0).(order.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrderBuy provides a mock function with given fields: userID
func (_m *OrderData) ListOrderBuy(userID uint) ([]order.Core, error) {
	ret := _m.Called(userID)

	var r0 []order.Core
	if rf, ok := ret.Get(0).(func(uint) []order.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrderSell provides a mock function with given fields: userID
func (_m *OrderData) ListOrderSell(userID uint) ([]order.Core, error) {
	ret := _m.Called(userID)

	var r0 []order.Core
	if rf, ok := ret.Get(0).(func(uint) []order.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: invoice, updateOrder
func (_m *OrderData) UpdateStatus(invoice string, updateOrder order.Core) error {
	ret := _m.Called(invoice, updateOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, order.Core) error); ok {
		r0 = rf(invoice, updateOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderData interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderData creates a new instance of OrderData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderData(t mockConstructorTestingTNewOrderData) *OrderData {
	mock := &OrderData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
