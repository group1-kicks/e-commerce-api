// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CartService is an autogenerated mock type for the CartService type
type CartService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, productID
func (_m *CartService) Add(token interface{}, productID uint) error {
	ret := _m.Called(token, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: token, cartID
func (_m *CartService) Delete(token interface{}, cartID uint) error {
	ret := _m.Called(token, cartID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: token
func (_m *CartService) GetAll(token interface{}) (interface{}, error) {
	ret := _m.Called(token)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, cartID, quantity
func (_m *CartService) Update(token interface{}, cartID uint, quantity int) error {
	ret := _m.Called(token, cartID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, int) error); ok {
		r0 = rf(token, cartID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCartService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartService creates a new instance of CartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartService(t mockConstructorTestingTNewCartService) *CartService {
	mock := &CartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
